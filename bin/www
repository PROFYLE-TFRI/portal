#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server')
const node = require('../node/server')
const http = require('http')

const config = require('../config')


/*
 * Spawn applicable servers
 */

if (config.isCentral)
  createServer(app,  process.env.PORT || '3001')

if (config.isNode)
  createServer(node, process.env.NODE_PORT || '3002')




/**
 * Create HTTP server
 */
function createServer(handler, port) {
  handler.set('port', normalizePort(port))

  const server = http.createServer(handler)
  // Listen on provided port, on all network interfaces.
  server.listen(port)
  server.on('error', onError.bind(null, port))
  server.on('listening', onListening.bind(null, server))

  console.log(`Listening on port ${port}`)
}


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}
